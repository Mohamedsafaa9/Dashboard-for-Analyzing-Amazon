# -*- coding: utf-8 -*-
"""sales dashboard .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ct3vuTuXE17SH6hFMfI9QXZCVOlHM_zj
"""

!pip install dash

import dash
from dash import dcc, html
import pandas as pd
import plotly.express as px

df = pd.read_csv('amazon.csv')
df.head()

# Check if the required columns exist in the DataFrame
required_columns = {'category', 'product_name', 'rating_count'}
if not required_columns.issubset(df.columns):
    raise ValueError(f"DataFrame must contain {required_columns} columns.")

# Convert rating_count to numeric if not already
df['rating_count'] = pd.to_numeric(df['rating_count'], errors='coerce')

# Drop rows with missing or NaN values in critical columns
df.dropna(subset=['category', 'product_name', 'rating_count'], inplace=True)

# Create a Dash app
app = dash.Dash(__name__)

# Define the layout of your dashboard
app.layout = html.Div([
    html.H1('Amazon Product Reviews Dashboard'),
    dcc.Dropdown(
        id='dropdown',
        options=[
            {'label': category, 'value': category} for category in df['category'].unique()
        ],
        value=df['category'].unique()[0]  # Set default value to the first available category
    ),
    dcc.Graph(id='graph')
])

# Callback function to update the graph based on dropdown selection
@app.callback(
    dash.dependencies.Output('graph', 'figure'),
    [dash.dependencies.Input('dropdown', 'value')]
)
def update_graph(selected_category):
    # Filter data for the selected category
    filtered_df = df[df['category'] == selected_category]

    # Debugging: Print out the filtered DataFrame
    print(f"Filtered DataFrame for category {selected_category}:\n", filtered_df)

    # Limit the number of products to the top 10 by rating count
    top_products_df = filtered_df.nlargest(10, 'rating_count')

    if top_products_df.empty:
        # Return an empty figure if no data matches the selected category
        fig = px.bar(title='No data available for the selected category')
    else:
        # Create a bar chart showing the top product names and their rating counts
        fig = px.bar(top_products_df,
                     x='product_name',
                     y='rating_count',
                     title=f'Top 10 Products by Rating Counts for {selected_category}')
        # Improve readability by rotating x-axis labels
        fig.update_layout(xaxis_tickangle=-45)

    return fig

if __name__ == '__main__':
    app.run_server(debug=True)